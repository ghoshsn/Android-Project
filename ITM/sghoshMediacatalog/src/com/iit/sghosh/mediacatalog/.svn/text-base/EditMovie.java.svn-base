/*****************************************************************************
 * Name..........: EditMovie
 * 
 * Description...: Activity for editing a movie
 *
 * Author........: Timothy A. DeWees
 * 
 * Version.......: 1.0
 * 
 * Change History: 1.0 (Timothy A. DeWees - 12/22/2008)
 *                     Initial writing - Code modeled after android notepad
 *                     example.
 *****************************************************************************/
package com.app.my_collection;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.List;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.DialogInterface.OnClickListener;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.SimpleCursorAdapter;
import android.widget.Spinner;
import android.widget.EditText;
import android.widget.TableLayout;
import android.widget.TableRow;
import org.apache.http.client.ClientProtocolException;

/**
 * Activity for viewing/editing a movie
 */
public class EditMovie extends Activity {

	/****************
	 * CLASS FIELDS *
	 ****************/
	private Button mLookup = null;
	private EditText mTitleText = null;
	private String _Title = new String();
	private EditText mUpc = null;
	private String _Upc = new String();
	private Spinner mCategory = null;
	private Long _Category = null;
	private Spinner mRatingText = null;
	private TableRow mRatingRow = null;
	private String _Rating = new String();
	private Spinner mStatusText = null;
	private String _Status = new String();
	private Spinner mTypeText = null;
	private String _SubType = new String();
	private String _Type = new String();
	private Long mRowId = null;
	private EditText mAuthor = null;
	private TableRow mAuthorRow = null;
	private String _Author = new String();
	private EditText mArtist = null;
	private TableRow mArtistRow = null;
	private String _Artist = new String();
	private ImageView mLargeImage = null;
	private EditText mYear = null;
	private String _Year = new String();
	private String _ImageUrl = new String();
	private byte[] _SmallImage = null;
	private byte[] _LargeImage = null;
	private Button mImage1 = null;
	private Button mImage2 = null;
	private Button mImage3 = null;
	private Button mImage4 = null;
	private Button mImage5 = null;
	private MoviesDbAdapter mDbHelper = null;
	private static final int SAVE_ID = Menu.FIRST;
	private static final int LOOKUP_ID = Menu.FIRST + 1;
	private static final int LOAN_OUT_ID = Menu.FIRST + 2;
	private static final int DELETE_ID = Menu.FIRST + 3;
	private static final int CANCEL_ID = Menu.FIRST + 4;
	private static final String KEY_ADDING_NEW = "ADDING_ITEM_KEY";
	private int selectedRank = 0;
	boolean initialLoad = true;
	ProgressDialog pd = null;
	private Context _context = null;
	private int _resultIndex = 0;
	SearchResult _result = null;
	/**
	 * Populates the form fields
	 */
	private void populateFields() {
		
		try {
		if (mDbHelper == null) {
			mDbHelper = new MoviesDbAdapter(this);
			mDbHelper.open();
		}
		
		Cursor cur_movie = null;
		Bundle extras = getIntent().getExtras();
		
		if(mRowId != null ) {
			cur_movie = mDbHelper.fetchMovie(mRowId);
			startManagingCursor(cur_movie);
		}

		//Image
		if(_ImageUrl == null) {
			if(mRowId != null) {
				if(!extras.containsKey(MoviesDbAdapter.KEY_MOVIE_IMAGE_URL)) {
					_ImageUrl = cur_movie.getString(cur_movie.getColumnIndexOrThrow(MoviesDbAdapter.KEY_MOVIE_IMAGE_URL));
				} else {
					_ImageUrl = extras.getString(MoviesDbAdapter.KEY_MOVIE_IMAGE_URL);
				}
			} else {
				_ImageUrl = (extras != null)
							?(extras.containsKey(MoviesDbAdapter.KEY_MOVIE_IMAGE_URL))?extras.getString(MoviesDbAdapter.KEY_MOVIE_IMAGE_URL):null
							:null;
			}
		}
		if(_LargeImage == null) {
			if(mRowId != null) {
				if(!extras.containsKey(MoviesDbAdapter.KEY_MOVIE_LARGE_IMAGE)) {
					_LargeImage = cur_movie.getBlob(cur_movie.getColumnIndexOrThrow(MoviesDbAdapter.KEY_MOVIE_LARGE_IMAGE));
				} else {
					_LargeImage = extras.getByteArray(MoviesDbAdapter.KEY_MOVIE_LARGE_IMAGE);
				}
			} else {
				_LargeImage = (extras != null)
							?(extras.containsKey(MoviesDbAdapter.KEY_MOVIE_LARGE_IMAGE))?extras.getByteArray(MoviesDbAdapter.KEY_MOVIE_LARGE_IMAGE):null
							:null;
			}
		}
		//Image
		if(_SmallImage == null) {
			if(mRowId != null) {
				if(!extras.containsKey(MoviesDbAdapter.KEY_MOVIE_SMALL_IMAGE)) {
					_SmallImage = cur_movie.getBlob(cur_movie.getColumnIndexOrThrow(MoviesDbAdapter.KEY_MOVIE_SMALL_IMAGE));
				} else {
					_SmallImage = extras.getByteArray(MoviesDbAdapter.KEY_MOVIE_SMALL_IMAGE);
				}
			} else {
				_SmallImage = (extras != null)
							?(extras.containsKey(MoviesDbAdapter.KEY_MOVIE_SMALL_IMAGE))?extras.getByteArray(MoviesDbAdapter.KEY_MOVIE_SMALL_IMAGE):null
							:null;
			}
		}
		if(_ImageUrl.length() > 0 ) {
			mLargeImage.setImageURI(Uri.parse(_ImageUrl));
		} else if(_LargeImage != null) {
			mLargeImage.setImageBitmap(BitmapFactory.decodeByteArray(_LargeImage, 0, _LargeImage.length));
		} else if(_SmallImage != null) {
			mLargeImage.setImageBitmap(BitmapFactory.decodeByteArray(_SmallImage, 0, _SmallImage.length));
		}
		//Title
		if(_Title.equals("")) {
			if(mRowId != null) {
				if(!extras.containsKey(MoviesDbAdapter.KEY_MOVIE_TITLE)) {
					_Title = cur_movie.getString(cur_movie.getColumnIndex(MoviesDbAdapter.KEY_MOVIE_TITLE));
				} else {
					_Title = extras.getString(MoviesDbAdapter.KEY_MOVIE_TITLE);
				}
			} else {
				_Title = (extras != null)
							?(extras.containsKey(MoviesDbAdapter.KEY_MOVIE_TITLE))?extras.getString(MoviesDbAdapter.KEY_MOVIE_TITLE):""
							:"";
			}
		}
		mTitleText.setText(_Title);
		//Artist
		if(_Artist.equals("")) {
			if(mRowId != null) {
				if(!extras.containsKey(MoviesDbAdapter.KEY_MOVIE_ARTIST)) {
					_Artist = cur_movie.getString(cur_movie.getColumnIndex(MoviesDbAdapter.KEY_MOVIE_ARTIST));
				} else {
					_Artist = extras.getString(MoviesDbAdapter.KEY_MOVIE_ARTIST);
				}
			} else {
				_Artist = (extras != null)
					?(extras.containsKey(MoviesDbAdapter.KEY_MOVIE_ARTIST))?extras.getString(MoviesDbAdapter.KEY_MOVIE_ARTIST):""
					:"";
			}
		}
		mArtist.setText(_Artist);
		//Author
		if(_Author.equals("")) {
			if(mRowId != null) {
				if(!extras.containsKey(MoviesDbAdapter.KEY_MOVIE_AUTHOR)) {
					_Author = cur_movie.getString(cur_movie.getColumnIndex(MoviesDbAdapter.KEY_MOVIE_AUTHOR));
				} else {
					_Author = extras.getString(MoviesDbAdapter.KEY_MOVIE_AUTHOR);
				}
			} else {
				_Author = (extras != null)
					?(extras.containsKey(MoviesDbAdapter.KEY_MOVIE_AUTHOR))?extras.getString(MoviesDbAdapter.KEY_MOVIE_AUTHOR):""
					:"";
			}
		}
		mAuthor.setText(_Author);
		//Year
		if(_Year.equals("")) {
			if(mRowId != null) {
				if(!extras.containsKey(MoviesDbAdapter.KEY_MOVIE_YEAR)) {
					_Year = cur_movie.getString(cur_movie.getColumnIndex(MoviesDbAdapter.KEY_MOVIE_YEAR));
				} else {
					_Year = extras.getString(MoviesDbAdapter.KEY_MOVIE_YEAR);
				}
			} else {
				_Year = (extras != null)
					?(extras.containsKey(MoviesDbAdapter.KEY_MOVIE_YEAR))?extras.getString(MoviesDbAdapter.KEY_MOVIE_YEAR):""
					:"";
			}
		}
		mYear.setText(_Year);
		//Upc
		if(_Upc.equals("")) {
			if(mRowId != null) {
				if(!extras.containsKey(MoviesDbAdapter.KEY_MOVIE_UPC)) {
					_Upc = cur_movie.getString(cur_movie.getColumnIndex(MoviesDbAdapter.KEY_MOVIE_UPC));
				} else {
					_Upc = extras.getString(MoviesDbAdapter.KEY_MOVIE_UPC);
				}
			} else {
				_Upc = (extras != null)
							?(extras.containsKey(MoviesDbAdapter.KEY_MOVIE_UPC))?extras.getString(MoviesDbAdapter.KEY_MOVIE_UPC):""
							:"";
			}
		}
		mUpc.setText(_Upc);
		mLookup.setEnabled(mUpc.getText().length() > 0);
		
		//Rating
		if(_Rating.equals("")) {
			if(mRowId != null) {
				if(!extras.containsKey(MoviesDbAdapter.KEY_MOVIE_RATING)) {
					_Rating = cur_movie.getString(cur_movie.getColumnIndexOrThrow(MoviesDbAdapter.KEY_MOVIE_RATING));
				} else {
					_Rating = extras.getString(MoviesDbAdapter.KEY_MOVIE_RATING);
				}
			} else {
				_Rating = (extras != null)
							?(extras.containsKey(MoviesDbAdapter.KEY_MOVIE_RATING))?extras.getString(MoviesDbAdapter.KEY_MOVIE_RATING):""
							:"";
			}
		}
		int ratingIndex = 0;
		for (int i = 0; i < mRatingText.getCount(); i++) {
			if (_Rating.equals(mRatingText.getItemAtPosition(i)
					.toString())) {
				ratingIndex = i;
				break;
			}
		}
		mRatingText.setSelection(ratingIndex);
		
		//Category
		if(_Category == null) {
			if(mRowId != null) {
				if(!extras.containsKey(MoviesDbAdapter.KEY_MOVIE_CATEGORY)) {
					_Category = cur_movie.getLong(cur_movie.getColumnIndexOrThrow(MoviesDbAdapter.KEY_MOVIE_CATEGORY_ID));
				} else {
					_Category = extras.getLong(MoviesDbAdapter.KEY_MOVIE_CATEGORY_ID);
				}
			} else {
				_Category = (extras != null)
								?(extras.containsKey(MoviesDbAdapter.KEY_MOVIE_CATEGORY_ID))?extras.getLong(MoviesDbAdapter.KEY_MOVIE_CATEGORY_ID):null
								:null;
			}
		}
		int categoryIndex = 0;
		for(int i = 0; i < mCategory.getCount(); i++) {
			if(_Category == mCategory.getItemIdAtPosition(i)) {
				categoryIndex = i;
				break;
			}
		}
		mCategory.setSelection(categoryIndex);
		//Status
		if(_Status.equals("")) {
			if(mRowId != null) {
				if(!extras.containsKey(MoviesDbAdapter.KEY_MOVIE_STATUS)) {
					_Status = cur_movie.getString(cur_movie.getColumnIndexOrThrow(MoviesDbAdapter.KEY_MOVIE_STATUS));
				} else {
					_Status = extras.getString(MoviesDbAdapter.KEY_MOVIE_STATUS);
					
				}
			} else {
				_Status = (extras != null)
							?(extras.containsKey(MoviesDbAdapter.KEY_MOVIE_STATUS))?extras.getString(MoviesDbAdapter.KEY_MOVIE_STATUS):""
							:"";
			}
		}
		int statusIndex = 0;
		for (int i = 0; i < mStatusText.getCount(); i++) {
			if (_Status.equals(mStatusText.getItemAtPosition(i)
					.toString())) {
				statusIndex = i;
				break;
			}
		}
		mStatusText.setSelection(statusIndex);
		//Type
		if(_SubType.equals("")) {
			if(mRowId != null) {
				if(!extras.containsKey(MoviesDbAdapter.KEY_MOVIE_SUBTYPE)) {
					_SubType = cur_movie.getString(cur_movie.getColumnIndexOrThrow(MoviesDbAdapter.KEY_MOVIE_SUBTYPE));
				} else {
					_SubType = extras.getString(MoviesDbAdapter.KEY_MOVIE_SUBTYPE);
				}
			} else {
				_SubType = (extras != null)
							?(extras.containsKey(MoviesDbAdapter.KEY_MOVIE_SUBTYPE))?extras.getString(MoviesDbAdapter.KEY_MOVIE_SUBTYPE):""
							:"";
			}
		}
		int typeIndex = 0;
		for (int i = 0; i < mTypeText.getCount(); i++) {
			if (_SubType.equals(mTypeText.getItemAtPosition(i).toString())) {
				typeIndex = i;
				break;
			}
		}
		mTypeText.setSelection(typeIndex);
		//Rank
		if(mRowId != null) {
			if(!extras.containsKey(MoviesDbAdapter.KEY_MOVIE_RANK)) {
				selectedRank = cur_movie.getInt(cur_movie.getColumnIndexOrThrow(MoviesDbAdapter.KEY_MOVIE_RANK));
			} else {
				selectedRank = extras.getInt(MoviesDbAdapter.KEY_MOVIE_RANK);
			}
		} else {
			selectedRank = (extras != null)
								?(extras.containsKey(MoviesDbAdapter.KEY_MOVIE_RANK))?extras.getInt(MoviesDbAdapter.KEY_MOVIE_RANK):1
								:1;
		}
		setRating(selectedRank, R.drawable.star_large);
		} catch(Exception ex) {
			android.util.Log.v("ERROR", (ex.getMessage() == null)?"error":ex.getMessage());
		}
		
		
	}//End of method private void populateFields

	private void setRating(int rank, int image) {
		
		mImage1.setBackgroundResource(R.drawable.disabled_star_large);
		mImage2.setBackgroundResource(R.drawable.disabled_star_large);
		mImage3.setBackgroundResource(R.drawable.disabled_star_large);
		mImage4.setBackgroundResource(R.drawable.disabled_star_large);
		mImage5.setBackgroundResource(R.drawable.disabled_star_large);
		if(rank > 0) {
			mImage1.setBackgroundResource(image);
		}
		if(rank > 1) {
			mImage2.setBackgroundResource(image);		
		}
		if(rank > 2) {
			mImage3.setBackgroundResource(image);
		}
		if(rank > 3) {
			mImage4.setBackgroundResource(image);
		}
		if(rank > 4) {
			mImage5.setBackgroundResource(image);
		}
	}
	
	@Override
	public boolean onMenuItemSelected(int featureId, MenuItem item) {
		switch (item.getItemId()) {
			case DELETE_ID:
				DeleteMovie();
				return true;
			case LOOKUP_ID:
				performLookup();
				return true;
			case SAVE_ID:
				SaveMovie();
				return true;
			case LOAN_OUT_ID:
				createRental();
				return true;
			case CANCEL_ID:
				CancelAction();
				return true;
		}

		return super.onMenuItemSelected(featureId, item);
	}
	
	/**
	 * Launches the EditRental activity and passes NO id
	 */
	private void createRental() {
		Intent i = new Intent(this, EditRental.class);
		i.putExtra(MoviesDbAdapter.KEY_RENTAL_MOVIE_ID, mRowId);
		startActivityForResult(i, 1);
	}//End of method private void createRental()
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode,
			Intent intent) {
		super.onActivityResult(requestCode, resultCode, intent);
		
	}//End of method protected void onActivityResult(int, int)
	
	@Override
	protected void onRestoreInstanceState(Bundle savedInstanceState) {
		super.onRestoreInstanceState(savedInstanceState);
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		
		//Result rslt = new Result();
		super.onCreateOptionsMenu(menu);
		MenuItem item = menu.add(0, SAVE_ID, 0, R.string.menu_save);
		item.setIcon(android.R.drawable.ic_menu_save);
		MenuItem item1 = menu.add(0, LOOKUP_ID, 0, R.string.menu_lookup);
		item1.setIcon(android.R.drawable.ic_menu_search);
		MenuItem item4 = menu.add(0, LOAN_OUT_ID, 0, R.string.menu_loan_out);
		item4.setIcon(android.R.drawable.ic_menu_gallery);
		item4.setEnabled(mRowId != null);
		MenuItem item2 = menu.add(0, DELETE_ID, 0, R.string.menu_remove);
		item2.setIcon(android.R.drawable.ic_menu_delete);
		item2.setEnabled(mRowId != null);
		MenuItem item3 = menu.add(0, CANCEL_ID, 0, R.string.menu_cancel);
		item3.setIcon(android.R.drawable.ic_menu_close_clear_cancel);
		return true;
	}
	
	@Override
	protected void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);
	}

	@Override
	protected void onPause() {
		super.onPause();
		
		Intent editor = getIntent();
		
		_Title = mTitleText.getText().toString();
		_Rating = mRatingText.getSelectedItem().toString();
		_Category = mCategory.getSelectedItemId();
		_Status = mStatusText.getSelectedItem().toString();
		_SubType = mTypeText.getSelectedItem().toString();
		_Upc = mUpc.getText().toString();
		_Artist = mArtist.getText().toString();
		_Author = mAuthor.getText().toString();
		_Year = mYear.getText().toString();
		
		if(mRowId != null) {
			editor.putExtra(MoviesDbAdapter.KEY_MOVIE_ID, mRowId);
			editor.putExtra(KEY_ADDING_NEW, false);
		} else {
			editor.putExtra(KEY_ADDING_NEW, true);
		}
		editor.putExtra(MoviesDbAdapter.KEY_MOVIE_TITLE, _Title);
		editor.putExtra(MoviesDbAdapter.KEY_MOVIE_RATING, _Rating);
		editor.putExtra(MoviesDbAdapter.KEY_MOVIE_CATEGORY, _Category);
		editor.putExtra(MoviesDbAdapter.KEY_MOVIE_STATUS, _Status);
		editor.putExtra(MoviesDbAdapter.KEY_MOVIE_TYPE, _Type);
		editor.putExtra(MoviesDbAdapter.KEY_MOVIE_SUBTYPE, _SubType);
		editor.putExtra(MoviesDbAdapter.KEY_MOVIE_RANK, selectedRank);
		editor.putExtra(MoviesDbAdapter.KEY_MOVIE_LARGE_IMAGE, _LargeImage);
		editor.putExtra(MoviesDbAdapter.KEY_MOVIE_SMALL_IMAGE, _SmallImage);
		editor.putExtra(MoviesDbAdapter.KEY_MOVIE_IMAGE_URL, _ImageUrl);
		editor.putExtra(MoviesDbAdapter.KEY_MOVIE_ARTIST, _Artist);
		editor.putExtra(MoviesDbAdapter.KEY_MOVIE_AUTHOR, _Author);
		editor.putExtra(MoviesDbAdapter.KEY_MOVIE_YEAR, _Year);
	}//End of onPause

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		mDbHelper = new MoviesDbAdapter(this);
		mDbHelper.open();
		
		setContentView(R.layout.movie_edit);
		setTitle(R.string.title_edit_movie);
		
		mTitleText = (EditText) findViewById(R.id.title);
		mRatingText = (Spinner) findViewById(R.id.rating);
		mRatingRow = (TableRow) findViewById(R.id.rating_row);
		mStatusText = (Spinner) findViewById(R.id.status);
		mTypeText = (Spinner) findViewById(R.id.type);
		mCategory = (Spinner) findViewById(R.id.category);
		mUpc = (EditText) findViewById(R.id.upc);
		mLargeImage = (ImageView) findViewById(R.id.large_image);
		mLookup = (Button) findViewById(R.id.lookup);
		mAuthor = (EditText) findViewById(R.id.author);
		mAuthorRow = (TableRow) findViewById(R.id.author_row);
		mArtist = (EditText) findViewById(R.id.artist);
		mArtistRow = (TableRow) findViewById(R.id.artist_row);
		mYear = (EditText) findViewById(R.id.year);
		/**
		 * Setup button
		 */
		mLookup.setOnClickListener( new View.OnClickListener() {
			public void onClick(View v) {
				performLookup();
			}
		});
		
		/**
		 * Setup rating images
		 */
		mImage1 = (Button) findViewById(R.id.rank1);
		mImage1.setFocusable(true);
		mImage1.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				selectedRank = 1;
				setRating(1, R.drawable.star_large);
			}
		});
		mImage1.setOnFocusChangeListener(new View.OnFocusChangeListener() {
			public void onFocusChange(View v, boolean hasFocus) {
				if(hasFocus) {
					setRating(1, R.drawable.star_selected_large);
				}
			}
		});
		mImage2 = (Button) findViewById(R.id.rank2);
		mImage2.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				selectedRank = 2;
				setRating(2, R.drawable.star_large);
			}
		});
		mImage2.setOnFocusChangeListener(new View.OnFocusChangeListener() {
			public void onFocusChange(View v, boolean hasFocus) {
				if(hasFocus) {
					setRating(2, R.drawable.star_selected_large);
				}
			}
		});
		mImage3 = (Button) findViewById(R.id.rank3);
		mImage3.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				selectedRank = 3;
				setRating(3, R.drawable.star_large);
			}
		});
		mImage3.setOnFocusChangeListener(new View.OnFocusChangeListener() {
			public void onFocusChange(View v, boolean hasFocus) {
				if(hasFocus) {
					setRating(3, R.drawable.star_selected_large);
				}
			}
		});
		mImage4 = (Button) findViewById(R.id.rank4);
		mImage4.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				selectedRank = 4;
				setRating(4, R.drawable.star_large);
			}
		});
		mImage4.setOnFocusChangeListener(new View.OnFocusChangeListener() {
			public void onFocusChange(View v, boolean hasFocus) {
				if(hasFocus) {
					setRating(4, R.drawable.star_selected_large);
				}
			}
		});
		mImage5 = (Button) findViewById(R.id.rank5);
		mImage5.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				selectedRank = 5;
				setRating(5, R.drawable.star_large);
			}
		});
		mImage5.setOnFocusChangeListener(new View.OnFocusChangeListener() {
			public void onFocusChange(View v, boolean hasFocus) {
				if(hasFocus) {
					setRating(5, R.drawable.star_selected_large);
				}
			}
		});
		/**
		 *  Setup spinners
		 */
		//Rating
		ArrayAdapter<CharSequence> ratingAdapter = ArrayAdapter
				.createFromResource(this, R.array.ratings,
						android.R.layout.simple_spinner_item);
		ratingAdapter
				.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		mRatingText.setAdapter(ratingAdapter);
		//Status
		ArrayAdapter<CharSequence> statusAdapter = ArrayAdapter.createFromResource(this, 
				R.array.statuses, android.R.layout.simple_spinner_item);
		statusAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		mStatusText.setAdapter(statusAdapter);
		mRowId = savedInstanceState != null ? savedInstanceState
				.getLong(MoviesDbAdapter.KEY_MOVIE_ID) : null;
		Bundle extras = getIntent().getExtras();
		
		Boolean performLookup = false;
		if(extras != null) {
			mRowId = (extras.containsKey(MoviesDbAdapter.KEY_MOVIE_ID))?extras.getLong(MoviesDbAdapter.KEY_MOVIE_ID):null;
			_Title = (extras.containsKey(MoviesDbAdapter.KEY_MOVIE_TITLE))?extras.getString(MoviesDbAdapter.KEY_MOVIE_TITLE):"";
			_Rating = (extras.containsKey(MoviesDbAdapter.KEY_MOVIE_RATING))?extras.getString(MoviesDbAdapter.KEY_MOVIE_RATING):"";
			_Category = (extras.containsKey(MoviesDbAdapter.KEY_MOVIE_CATEGORY_ID))?extras.getLong(MoviesDbAdapter.KEY_MOVIE_CATEGORY_ID):null;
			_Status = (extras.containsKey(MoviesDbAdapter.KEY_MOVIE_STATUS))?extras.getString(MoviesDbAdapter.KEY_MOVIE_STATUS):"";
			_Type = (extras.containsKey(MoviesDbAdapter.KEY_MOVIE_TYPE))?extras.getString(MoviesDbAdapter.KEY_MOVIE_TYPE):"";
			_SubType = (extras.containsKey(MoviesDbAdapter.KEY_MOVIE_SUBTYPE))?extras.getString(MoviesDbAdapter.KEY_MOVIE_SUBTYPE):"";
			_Upc = (extras.containsKey(MoviesDbAdapter.KEY_MOVIE_UPC))?extras.getString(MoviesDbAdapter.KEY_MOVIE_UPC):"";
			performLookup = (extras.containsKey("PerformLookup"))?extras.getBoolean("PerformLookup"):false;
			_LargeImage = (extras.containsKey(MoviesDbAdapter.KEY_MOVIE_LARGE_IMAGE))?extras.getByteArray(MoviesDbAdapter.KEY_MOVIE_LARGE_IMAGE):null;
			_SmallImage = (extras.containsKey(MoviesDbAdapter.KEY_MOVIE_SMALL_IMAGE))?extras.getByteArray(MoviesDbAdapter.KEY_MOVIE_SMALL_IMAGE):null;
			_ImageUrl = (extras.containsKey(MoviesDbAdapter.KEY_MOVIE_IMAGE_URL))?extras.getString(MoviesDbAdapter.KEY_MOVIE_IMAGE_URL):"";
			_Artist = (extras.containsKey(MoviesDbAdapter.KEY_MOVIE_ARTIST))?extras.getString(MoviesDbAdapter.KEY_MOVIE_ARTIST):"";
			_Author = (extras.containsKey(MoviesDbAdapter.KEY_MOVIE_AUTHOR))?extras.getString(MoviesDbAdapter.KEY_MOVIE_AUTHOR):"";
			selectedRank = (extras.containsKey(MoviesDbAdapter.KEY_MOVIE_RANK))?extras.getInt(MoviesDbAdapter.KEY_MOVIE_RANK):0;
		}
		
		//Set the type list
		int typeResource = 0;
		TableLayout parent = (TableLayout)mArtistRow.getParent();
		if(_Type.toUpperCase().equals("MOVIE")) {
			typeResource = R.array.types_movie;
			parent.removeView(mArtistRow);
			parent.removeView(mAuthorRow);
		} else if (_Type.toUpperCase().equals("GAME")) {
			typeResource = R.array.types_game;
			parent.removeView(mArtistRow);
			parent.removeView(mAuthorRow);
		} else if (_Type.toUpperCase().equals("BOOK")) {
			typeResource = R.array.types_book;
			parent.removeView(mRatingRow);
			parent.removeView(mArtistRow);
		} else if (_Type.toUpperCase().equals("CD")) {
			typeResource = R.array.types_cd;
			parent.removeView(mRatingRow);
			parent.removeView(mAuthorRow);
		}
		ArrayAdapter<CharSequence> typeAdapter = ArrayAdapter.createFromResource(this
			, typeResource, android.R.layout.simple_spinner_item);
		typeAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		mTypeText.setAdapter(typeAdapter);
		//Category Spinner
		Cursor categoryCursor = mDbHelper.fetchCategoriesByType(_Type);
		SimpleCursorAdapter categoryAdapter = new SimpleCursorAdapter(this, android.R.layout.simple_spinner_item
				, categoryCursor, new String[] {MoviesDbAdapter.KEY_CATEGORY_NAME}
				, new int[] {android.R.id.text1});
		categoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		mCategory.setAdapter(categoryAdapter);
		
		_context = this;
		populateFields();
		if(performLookup && !_Upc.equals("")) {
			extras.putBoolean("PerformLookup", false);
			performLookup();
		}
	}
	
	private void SaveMovie() {
		String title = mTitleText.getText().toString();
		String rating = mRatingText.getSelectedItem().toString();
		Long category = mCategory.getSelectedItemId();
		String status = mStatusText.getSelectedItem().toString();
		String subtype = mTypeText.getSelectedItem().toString();
		String upc = mUpc.getText().toString();
		String artist = mArtist.getText().toString();
		String author = mAuthor.getText().toString();
		String year = mYear.getText().toString();
		
		if (mRowId == null) {
			long id = mDbHelper
					.createMovie(title, rating, category, status, _Type, subtype, selectedRank, upc, _LargeImage, _SmallImage, artist, author, year, _ImageUrl);
			if (id > 0) {
				mRowId = id;
			}
		} else {
			mDbHelper.updateMovie(mRowId, title, rating, category, status, _Type, subtype, selectedRank, upc, _LargeImage, _SmallImage, artist, author, year, _ImageUrl);
		}
		setResult(RESULT_OK);
		finish();
	}
	
	private void DeleteMovie() {
		NotificationHelper.showYesNoAlert(this, "Confirm Deletion"
			, "Are you sure you want to delete this item?"
			, new OnClickListener() {
	
				@Override
				public void onClick(DialogInterface dialog, int which) {
					if (mDbHelper.deleteMovie(mRowId)) {
						setResult(RESULT_OK);
					} else {
						setResult(RESULT_CANCELED);
					}
					finish();
				}
			
			}, new OnClickListener() {
				@Override
				public void onClick(DialogInterface dialog, int which) {
					//Do nothing
				}
			}
		);
	}
	
	private void CancelAction() {
		setResult(RESULT_CANCELED);
		finish();
	}
	
	private void performLookup() {
		_Upc = mUpc.getText().toString();
		if(_Upc != null && _Upc.length() > 0) {
		
			try {
				_Title = mTitleText.getText().toString();
				_Rating = mRatingText.getSelectedItem().toString();
				_Category = mCategory.getSelectedItemId();
				_Status = mStatusText.getSelectedItem().toString();
				_Artist = mArtist.getText().toString();
				_Author = mAuthor.getText().toString();
				_Year = mYear.getText().toString();
				_Upc = mUpc.getText().toString();
				pd = ProgressDialog.show(this, "Searching...",
						"Please wait while we search Amazon for the UPC", true, false);
				new SearchTask().execute(_Upc);
			} catch(Exception sax) {
				_Title = "";
			}
			
		}
		
	}
	
	/**
	 * Performs the lookup service call
	 * @param upc
	 * @return
	 */
	public List<SearchResult> performMovieServiceLookup(String upc) {
		
		//Setup lookup
		MovieLookupData mld = new MovieLookupData();
		AmazonRequestHelper requestHelper = null;
		
		String searchType = getResources().getString(R.string.search_type_movies);
		if(_Type.toUpperCase().equals("GAME")) {
			searchType = getResources().getString(R.string.search_type_games);
		} else if(_Type.toUpperCase().equals("BOOK")) {
			searchType = getResources().getString(R.string.search_type_books);
		} else if(_Type.toUpperCase().equals("CD")) {
			searchType = getResources().getString(R.string.search_type_music);
		}
		String url = String.format(getResources().getString(R.string.search_url_type_upc),
    			new Object[] {searchType ,upc});
             
        // Create a response handler
		List<SearchResult> results = null;
        try {
        	requestHelper = new AmazonRequestHelper(url);
        	results = requestHelper.performAmazonServiceLookup();
        	
        } catch(ClientProtocolException cpe) {
        	mld.setLookupValidity(false);
        	mld.setLookupMessage(cpe.getMessage());
        }
        catch(IOException ioe) {
        	mld.setLookupValidity(false);
        	mld.setLookupMessage(ioe.getMessage());
        }
        return results;
	}//end of method public performMovieServiceLookup(upc)
	
	@Override 
	public boolean onKeyUp(int keyCode, android.view.KeyEvent event) {
		//Check that the filter textview doesn't have focus.  The delete
		//event for the TextView was being picked up here and deleting
		//movies when you just wanted to delete your filter
		EditText upc = (EditText) findViewById(R.id.upc);
		Button lookup = (Button) findViewById(R.id.lookup);
		lookup.setEnabled((upc.getText().length() > 0));
		return super.onKeyUp(keyCode, event);
	}
	
		/**
	 * Private class which verifies the database in the background.  
	 * 
	 * @author tim
	 *
	 */
	private class SearchTask extends AsyncTask<String, List<SearchResult>, List<SearchResult> > {
	     
		protected List<SearchResult> doInBackground(String... args) {
	    	 try {
	    		 List<SearchResult> results = performMovieServiceLookup(_Upc);
	    		 //If we get more than one item back, we need to let user choose
	    		 
		 		 if(results != null ) {
	 				 if(!results.get(_resultIndex).getLargeUrl().equals("")) {
	 					byte[] image = getImageFromUrl(results.get(_resultIndex).getLargeUrl());
	 					if(image.length > 0) {
	 						results.get(_resultIndex).setLargeImageBitmap(resizeImage(image, 70, 83));
	 						results.get(_resultIndex).setSmallImageBitmap(resizeImage(image, 42, 55));
	 					}
	 				 }
		 		 }
	    		 
	 			 return results;
	    	 } catch (Exception ex) {
	    		 return null;
	    	 }
	     }

	     protected void onPostExecute(List<SearchResult> results) {
	    	try
	 		{
	 			pd.dismiss();
	 			_result = results.get(_resultIndex);
				if(_result != null && !_result.getTitle().equals("")) {
					_SmallImage = _result.getSmallImageBitmap();
		 			_LargeImage = _result.getLargeImageBitmap();
		 			_ImageUrl = _result.getLargeUrl();
					_Title = _result.getTitle();
					_Author = _result.getAuthor();
					_Artist = _result.getArtist();
					_Year = _result.getReleaseDate();
					populateFields();
				} else {
					NotificationHelper.showAlert(_context, "NOT FOUND", "Your UPC was not found, did you select the right type (DVD/Blu-Ray/Game)?");
				}
	 		} catch(Exception ex) {
	 			//NotificationHelper.showAlert(this, "", ex.getMessage());
	 		}
	     }
	 }
	
	private byte[] resizeImage(byte[] image, int width, int height) {
		byte[] b = null;
		if(image != null) {
			Bitmap bmo = BitmapFactory.decodeByteArray(image, 0, image.length );
			int awidth = bmo.getWidth();
			int aheight = bmo.getHeight();
			float scaleWidth = ((float) width) / awidth;
	        float scaleHeight = ((float) height) / aheight; 
			Matrix matrix = new Matrix();
			matrix.postScale(scaleWidth, scaleHeight);
			Bitmap bmn = null;
			ByteArrayOutputStream outputStream = 
			    new ByteArrayOutputStream(8196);

			
			try {
				bmn = Bitmap.createBitmap(bmo, 0, 0, awidth, aheight, matrix, true);
				if(bmn != null) {
					bmn.compress(Bitmap.CompressFormat.PNG, 100, outputStream);
					b = outputStream.toByteArray();
				}
			} catch(Exception ex) {
				String message = ex.getMessage();
				android.util.Log.v("ERROR", message);
			}
		}
		return b;
	}
	
	public byte[] getImageFromUrl(String url) {
		byte[] data = null;
		try {
			org.apache.commons.httpclient.HttpClient httpclient = new org.apache.commons.httpclient.HttpClient();
			org.apache.commons.httpclient.methods.GetMethod httpget = new org.apache.commons.httpclient.methods.GetMethod(url);
			httpget.setFollowRedirects(true);
			httpclient.executeMethod(httpget);
			data = httpget.getResponseBody();
			
		} catch (MalformedURLException e) {
		} catch (IOException e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
		}
		return data;
	}
	
}//End of class EditMove
